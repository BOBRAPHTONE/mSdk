/*
 * gpio.h
 *
 *  Created on: Jan 13, 2013
 *      Author: XxXx
 */

#ifndef GPIO_H_
#define GPIO_H_

/*
** Structure to store the GPIO context
*/
typedef struct gpioContext{
    unsigned int ctrl;
    unsigned int dir;
}GPIOCONTEXT;

#define GPIO0_BASE_ADDR = 0x4A310000
#define GPIO1_BASE_ADDR = 0x48055000
#define GPIO2_BASE_ADDR = 0x48057000
#define GPIO3_BASE_ADDR = 0x48059000
#define GPIO4_BASE_ADDR = 0x4805B000
#define GPIO5_BASE_ADDR = 0x4805D000

typedef volatile unsigned int _GPIO_;

typedef struct
{
	_GPIO_ GPIO_REVISION;//0x00
	_GPIO_ GPIO_RESERVED_0x04;//0x04
	_GPIO_ GPIO_RESERVED_0x08;//0x08
	_GPIO_ GPIO_SYSCONFIG;//0x10
	_GPIO_ GPIO_RESERVED_0x14;//0x14
	_GPIO_ GPIO_RESERVED_0x18;//0x18
	_GPIO_ GPIO_RESERVED_0x1C;//0x1C
	_GPIO_ GPIO_RESERVED_0x20;//0x20
	_GPIO_ GPIO_IRQSTATUS_RAW_0;//0x24
	_GPIO_ GPIO_IRQSTATUS_RAW_1;//0x28
	_GPIO_ GPIO_IRQSTATUS_0;//0x2C
	_GPIO_ GPIO_IRQSTATUS_1;//0x30
	_GPIO_ GPIO_IRQSTATUS_SET_0;//0x34
	_GPIO_ GPIO_IRQSTATUS_SET_1;//0x38
	_GPIO_ GPIO_IRQSTATUS_CLR_0;//0x3C
	_GPIO_ GPIO_IRQSTATUS_CLR_1;//0x40
	_GPIO_ GPIO_IRQWAKEN_0;//0x44
	_GPIO_ GPIO_IRQWAKEN_1;//0x48
	_GPIO_ GPIO_RESERVED_4C_to_110[51];
	_GPIO_ GPIO_SYSSTATUS;//0x114
	_GPIO_ GPIO_RESERVED_0x118;//0x118
	_GPIO_ GPIO_RESERVED_0x11C;//0x11C
	_GPIO_ GPIO_WAKEUPENABLE;//0x120
	_GPIO_ GPIO_RESERVED_0x124;//0x11C
	_GPIO_ GPIO_RESERVED_0x128;//0x11C
	_GPIO_ GPIO_RESERVED_0x12C;//0x11C
	_GPIO_ GPIO_CTRL;//0x130
	_GPIO_ GPIO_OE;//0x134
	_GPIO_ GPIO_DATAIN;//0x138
	_GPIO_ GPIO_DATAOUT;//0x13C
	_GPIO_ GPIO_LEVELDETECT0;//0x140
	_GPIO_ GPIO_LEVELDETECT1;//0x144
	_GPIO_ GPIO_RISINGDETECT;//0x148
	_GPIO_ GPIO_FALLINGDETECT;//0x14C
	_GPIO_ GPIO_DEBOUNCENABLE;//0x150
	_GPIO_ GPIO_DEBOUNCINGTIME;//0x154
	_GPIO_ GPIO_RESERVED_158_to_17C[10];
	_GPIO_ GPIO_CLEARWKUPENA;//0x180
	_GPIO_ GPIO_SETWKUENA;//0x184
	_GPIO_ GPIO_RESERVED_0x188;//0x188
	_GPIO_ GPIO_RESERVED_0x18C;//0x18C
	_GPIO_ GPIO_CLEARDATAOUT;//0x190
	_GPIO_ GPIO_SETDATAOUT;//0x194
}GPIO_t;

#define GPIO0 (*(L4PER_CM2_t *) 0x4A310000)
#define GPIO1 (*(L4PER_CM2_t *) 0x48055000)
#define GPIO2 (*(L4PER_CM2_t *) 0x48057000)
#define GPIO3 (*(L4PER_CM2_t *) 0x48059000)
#define GPIO4 (*(L4PER_CM2_t *) 0x4805B000)
#define GPIO5 (*(L4PER_CM2_t *) 0x4805D000)

#define GPIO0_addr  0x4A310000
#define GPIO1_addr  0x48055000
#define GPIO2_addr  0x48057000
#define GPIO3_addr  0x48059000
#define GPIO4_addr  0x4805B000
#define GPIO5_addr  0x4805D000

typedef enum
{
	GPIO_REVISION = 0x00000000,
	GPIO_SYSCONFIG = 0x00000010,
	GPIO_IRQSTATUS_RAW_0 = 0x00000024,
	GPIO_IRQSTATUS_RAW_1 = 0x00000028,
	GPIO_IRQSTATUS_0 = 0x0000002C,
	GPIO_IRQSTATUS_1 = 0x00000030,
	GPIO_IRQSTATUS_SET_0 = 0x00000034,
	GPIO_IRQSTATUS_SET_1 = 0x00000038,
	GPIO_IRQSTATUS_CLR_0 = 0x0000003C,
	GPIO_IRQSTATUS_CLR_1 = 0x00000040,
	GPIO_IRQWAKEN_0 = 0x00000044,
	GPIO_IRQWAKEN_1 = 0x00000048,
	GPIO_SYSSTATUS = 0x00000114,
	GPIO_WAKEUPENABLE = 0x00000120,
	GPIO_CTRL = 0x00000130,
	GPIO_OE = 0x00000134,
	GPIO_DATAIN = 0x00000138,
	GPIO_DATAOUT = 0x0000013C,
	GPIO_LEVELDETECT0 = 0x00000140,
	GPIO_LEVELDETECT1 = 0x00000144,
	GPIO_RISINGDETECT = 0x00000148,
	GPIO_FALLINGDETECT = 0x0000014C,
	GPIO_DEBOUNCENABLE = 0x00000150,
	GPIO_DEBOUNCINGTIME = 0x00000154,
	GPIO_CLEARWKUPENA = 0x00000180,
	GPIO_SETWKUENA = 0x00000184,
	GPIO_CLEARDATAOUT = 0x00000190,
	GPIO_SETDATAOUT = 0x00000194
}gpio_reg_enum;

typedef enum
{
	GPIO_SYSCONFIG_AUTOIDLE_bp = 0,
	GPIO_SYSCONFIG_AUTOIDLE_bm = 1 << GPIO_SYSCONFIG_AUTOIDLE_bp,
	GPIO_SYSCONFIG_IDLEMODE_FREE_RUNNING = 0,
	GPIO_SYSCONFIG_IDLEMODE_AUTO = 1,

	GPIO_SYSCONFIG_SOFTRESET_bp = 1,
	GPIO_SYSCONFIG_SOFTRESET_bm =  1 << GPIO_SYSCONFIG_SOFTRESET_bp,
	GPIO_SYSCONFIG_SOFTRESET_NORMAL_MODE = 0,
	GPIO_SYSCONFIG_SOFTRESET_MODULE_RESET = 1,

	GPIO_SYSCONFIG_ENAWAKEUP_bp = 2,
	GPIO_SYSCONFIG_ENAWAKEUP_bm =  1 << GPIO_SYSCONFIG_ENAWAKEUP_bp,
	GPIO_SYSCONFIG_ENAWAKEUP_SISABLED = 0,
	GPIO_SYSCONFIG_ENAWAKEUP_ENABLED = 1,

	GPIO_SYSCONFIG_IDLEMODE_gp = 3,
	GPIO_SYSCONFIG_IDLEMODE_gm =  0x03 << GPIO_SYSCONFIG_IDLEMODE_gp,
	GPIO_SYSCONFIG_IDLEMODE_FORCE_IDLE = 0,
	GPIO_SYSCONFIG_IDLEMODE_NO_IDLE = 1,
	GPIO_SYSCONFIG_IDLEMODE_SMART_IDLE = 2,
	GPIO_SYSCONFIG_IDLEMODE_SMART_WAKEUP_IDLE = 3
}GPIO_SYSCONFIG_enum;

typedef enum
{
	GPIO_SYSSTATUS_RESETDONE_bp = 0,
	GPIO_SYSSTATUS_RESETDONE_bm = 1 << GPIO_SYSSTATUS_RESETDONE_bp,
	GPIO_SYSSTATUS_RESETDONE_ON_GOING = 0,
	GPIO_SYSSTATUS_RESETDONE_COMPLETED = 1
}GPIO_SYSSTATUS_enum;

typedef enum
{
	GPIO_CTRL_DISABLEMODULE_bp = 0,
	GPIO_CTRL_DISABLEMODULE_bm = 1 << GPIO_CTRL_DISABLEMODULE_bp,
	GPIO_CTRL_DISABLEMODULE_IS_ENABLED = 0,
	GPIO_CTRL_DISABLEMODULE_IS_DISABLED = 1,

	GPIO_CTRL_GATINGRATIO_gp = 1,
	GPIO_CTRL_GATINGRATIO_gm = 0x03 << GPIO_CTRL_GATINGRATIO_gp,
	GPIO_CTRL_GATINGRATIO_1 = 0,
	GPIO_CTRL_GATINGRATIO_2 = 1,
	GPIO_CTRL_GATINGRATIO_4 = 2,
	GPIO_CTRL_GATINGRATIO_8 = 3
}GPIO_CTRL_enum;








void GPIOModuleReset(unsigned int baseAdd);
void GPIOModuleEnable(unsigned int baseAdd);
void GPIOModuleDisable(unsigned int baseAdd);
void GPIODirModeSet(unsigned int baseAdd,
                    unsigned int pinNumber,
                    unsigned int pinDirection);
unsigned int GPIODirModeGet(unsigned int baseAdd,
                            unsigned int pinNumber);
void GPIOPinWrite(unsigned int baseAdd,
                  unsigned int pinNumber,
                  unsigned int pinValue);
unsigned int GPIOPinRead(unsigned int baseAdd,
                         unsigned int pinNumber);
void GPIOMultiplePinsWrite(unsigned int baseAdd,
                           unsigned int setMask,
                           unsigned int clrMask);
unsigned int GPIOMultiplePinsRead(unsigned int baseAdd,
                                  unsigned int readMask);
unsigned int GPIORevisionInfoGet(unsigned int baseAdd);
void gpioContextSave(unsigned int baseAdd, GPIOCONTEXT *contextPtr);
void gpioContextRestore(unsigned int baseAdd, GPIOCONTEXT *contextPtr);


#ifdef HEADER_INCLUDE_C_FILES
#include "gpio.c"
#endif

#endif /* GPIO_H_ */
